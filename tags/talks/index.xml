<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>talks on Mykola on blog</title><link>https://mgurov.github.io/tags/talks/</link><description>Recent content in talks on Mykola on blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 31 Jan 2022 22:52:38 +0200</lastBuildDate><atom:link href="https://mgurov.github.io/tags/talks/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing on Production – deep backend edition</title><link>https://mgurov.github.io/talks/testing-on-production/</link><pubDate>Sun, 07 Jul 2019 12:31:38 +0200</pubDate><guid>https://mgurov.github.io/talks/testing-on-production/</guid><description>Embrace Production as a first-class testing environment to decrease costs and improve quality.
Thorough testing before merging to master is great, but it doesn’t reveal the unknowns. Staging on shared environments tends to be slow, unreliable and costly to support. Why not just learn from the only true environment by conducting safe and efficient experiments?
This talk is based on my experience of increasing the delivery rate within the context of back-end systems of bol.</description></item><item><title>Back to Trunk - the path of the Continuous Delivery</title><link>https://mgurov.github.io/talks/trunk-based-delivery/</link><pubDate>Sun, 07 Jul 2019 12:41:38 +0200</pubDate><guid>https://mgurov.github.io/talks/trunk-based-delivery/</guid><description>A story of a feature team that implemented Continous Delivery accidentally.
Deploy continuously, move faster. Why? Won’t things break? What are the benefits for the teams and their stakeholders? Do those also apply to the “deep” back-end systems?
At bol.com (one of the biggest online retailers of the Netherlands), feature teams enjoy lots of autonomy. We can press the &amp;ldquo;deploy&amp;rdquo; button at any moment. Theoretically. Practically, there are non-technical obstacles, like: &amp;ldquo;testing isn&amp;rsquo;t complete, the rest of the changes must wait.</description></item><item><title>Sugar rush of Kotlin for your tests</title><link>https://mgurov.github.io/talks/kotlin-for-testability/</link><pubDate>Sun, 07 Jul 2019 12:51:38 +0200</pubDate><guid>https://mgurov.github.io/talks/kotlin-for-testability/</guid><description>&lt;p>Why do teams prefer Kotlin for their tests, even when their production code stays in Java?&lt;/p>
&lt;p>Learn how Kotlin&amp;rsquo;s syntax helps keep tests clean, expressive and concise.&lt;/p></description></item><item><title>WIP: External domain context with Ktor and Kotlin DSL for expressive and resilient testing</title><link>https://mgurov.github.io/talks/external-context/</link><pubDate>Mon, 31 Jan 2022 22:52:38 +0200</pubDate><guid>https://mgurov.github.io/talks/external-context/</guid><description>Learn how to build meaningful functional tests in isolation. The highlights of this technique are the minimal deviation from the production configuration or code, and very limited use of mocking. Thanks to higher tier positioning on the testing pyramid, the tests written with this technique are quite implementation-agnostic, and excel in supporting structural refactorings or high-level documentation of the component behavior.</description></item><item><title>WIP – Mocks: is more always better?</title><link>https://mgurov.github.io/talks/mockless-testing/</link><pubDate>Tue, 30 Jul 2019 21:04:07 +0200</pubDate><guid>https://mgurov.github.io/talks/mockless-testing/</guid><description>&lt;p>Mocking and stubbing are, without any doubt, important techniques for a modern software developer to master. But can there be too much of the mocking goodness?&lt;/p></description></item></channel></rss>