<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring on Mykola on Web</title><link>https://mgurov.github.io/mgugoblog/tags/spring/</link><description>Recent content in spring on Mykola on Web</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Jan 2020 19:02:56 +0100</lastBuildDate><atom:link href="https://mgurov.github.io/mgugoblog/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring @Transactional programmatically</title><link>https://mgurov.github.io/mgugoblog/posts/0004-programmatic-spring-transactional/</link><pubDate>Sun, 12 Jan 2020 19:02:56 +0100</pubDate><guid>https://mgurov.github.io/mgugoblog/posts/0004-programmatic-spring-transactional/</guid><description>Beware: this post is WIP.
An an enterprise developer, it&amp;rsquo;s easy to get used to the conveniences of Spring (Boot) so much that it becomes an issue on itself. Take @Transactional. Arguably, one of the few core features of Spring that does make us more productive in development. But at times it can be slightly inconvenient to rely solely on annotation for transaction boundary setup:
It might not be desireable to have a database transaction open throughout the whole request processing, e.</description></item><item><title>Java Integration Tests v Spring Context – when less is more</title><link>https://mgurov.github.io/mgugoblog/posts/0001-integration_tests_v_spring/</link><pubDate>Sat, 06 Jul 2019 23:13:31 +0200</pubDate><guid>https://mgurov.github.io/mgugoblog/posts/0001-integration_tests_v_spring/</guid><description>&lt;p>When doing integration testing within a Spring (Boot) based project, we tend to use some sort of Spring context. Setting it up isn&amp;rsquo;t free. Careless tests composition can lead to much time wasted on re-creating those contexts, and will make running tests painfully long very quickly. There are simple techniques of keeping this overhead to the minimum. Ideally – start only one test context for the whole run.&lt;/p></description></item></channel></rss>