<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Me speaker on Mykola on blog</title>
    <link>https://mgurov.github.io/talks/</link>
    <description>Recent content in Me speaker on Mykola on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jul 2019 12:51:38 +0200</lastBuildDate>
    
	<atom:link href="https://mgurov.github.io/talks/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WIP – Sprinkle sprinkle Kotlin sugar - small big shifts in test preparation</title>
      <link>https://mgurov.github.io/talks/kotlin-for-testability/</link>
      <pubDate>Sun, 07 Jul 2019 12:51:38 +0200</pubDate>
      
      <guid>https://mgurov.github.io/talks/kotlin-for-testability/</guid>
      <description>How to bring joy back to TDD with Kotlin again</description>
    </item>
    
    <item>
      <title>Back to Trunk - the path of the Continuous Delivery</title>
      <link>https://mgurov.github.io/talks/trunk-based-delivery/</link>
      <pubDate>Sun, 07 Jul 2019 12:41:38 +0200</pubDate>
      
      <guid>https://mgurov.github.io/talks/trunk-based-delivery/</guid>
      <description>Deploy continuously, move faster. Why? Won’t things break? What are the benefits for the teams and their stakeholders? Do those also apply to the “deep” back-end systems?
At bol.com (one of the biggest online retailers of the Netherlands), feature teams enjoy lots of autonomy. We can press the &amp;ldquo;deploy&amp;rdquo; button at any moment. Theoretically. Practically, there are non-technical obstacles, like: &amp;ldquo;testing isn&amp;rsquo;t complete, the rest of the changes must wait.</description>
    </item>
    
    <item>
      <title>Testing on Production – deep backend edition</title>
      <link>https://mgurov.github.io/talks/testing-on-production/</link>
      <pubDate>Sun, 07 Jul 2019 12:31:38 +0200</pubDate>
      
      <guid>https://mgurov.github.io/talks/testing-on-production/</guid>
      <description>Embrace Production as a first-class testing environment to decrease costs and improve quality.
Thorough testing before merging to master is great, but it doesn’t reveal the unknowns. Staging on shared environments tends to be slow, unreliable and costly to support. Why not just learn from the only true environment by conducting safe and efficient experiments?
This talk is based on my experience of increasing the delivery rate within the context of back-end systems of bol.</description>
    </item>
    
  </channel>
</rss>